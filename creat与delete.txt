
#include <vector>
#include <iostream>
#include <boost/regex.hpp>
#include <string.h>
#include <fstream>

using namespace std;
using namespace boost;

class SqlEx {
public:
	SqlEx(string ex);
	//~SqlEx();
	bool check();
	vector<vector<string>> getResult();
private:
	bool ForSelect();
	bool ForUpdate();
	bool ForCreate();
	bool ForDelete();
	bool ForInsert();
	string sql(string str);
	vector<vector<string>> result;
	string Ex;
};

SqlEx::SqlEx(string ex)
{
	Ex = ex;
}

bool SqlEx::check()
{
	Ex = sql(Ex);

	Ex = Ex + "END";

	string sqlupdate = "update\.+set\.+(where\.+)?END";
	string sqlselect = "select\.+from\.+(where\.+)?((group by)?|(order by)?|(having)?)END";
	string sqlcreate = "create table\.+\\(\.+\\)END";
	string sqldelete = "delete\.+from\.+where\.+END";
	string sqlinsert = "insert\.+into\.+(\(\.+/)\.*)?values\(.+\)END";
	regex pupdate(sqlupdate);
	regex pcreate(sqlcreate);
	regex pselect(sqlselect);
	regex pdelete(sqldelete);
	regex pinsert(sqlinsert);

	if (regex_match(Ex, pselect))
		return ForSelect();
	else if (regex_match(Ex, pupdate))
		return ForUpdate();
	else if (regex_match(Ex, pcreate))
		return ForCreate();
	else if (regex_match(Ex, pdelete))
		return ForDelete();
	else if (regex_match(Ex, pinsert))
		return ForInsert();
	else {
		cout << "请检查你的语句是否正确，不支持该语句！！" << endl;
		return false;
	}
		return true;
}

bool SqlEx::ForCreate() {
	vector<vector<string>> Create;
	regex reg1("(?<=create table )\.+?(?=\\()");
	regex reg2("(?<=\\()\.+(?=\\))");
	smatch csm1;
	smatch csm2;
	string cstr[2];

	if (regex_search(Ex, csm1, reg1)) {
		vector<string>create1;
		cstr[0] = csm1.str();
		cout << "create table:" << endl;
		cout << cstr[0] << endl;
		cout << endl;
		create1.push_back(cstr[0]);
		Create.push_back(create1);
	}
	else {
		cout << "检查create table语句后是否存在错误！！！" << endl;
		return false;
	}
	if (regex_search(Ex, csm2, reg2)) {
		cstr[1] = csm2.str();

		regex rer("(\.+?,)|(\.+)");
		smatch rsm;
		string::const_iterator st = cstr[1].begin();
		string::const_iterator en = cstr[1].end();

		while (regex_search(st, en, rsm, rer)) {
			string ss = rsm.str();
			bool isname = true;
			bool isatt = false;
			bool iscap = false;
			string name = "";
			string attribute = "";
			string capacity = "";
			vector<string> create1;
			for (int i = 0; i < ss.length(); i++) {
				if (isname == true && ss[i] != ' ') {
					name = name + ss[i];
				}
				if (isname == true && name != ""&&ss[i] == ' ') {
					isname = false;
					isatt = true;
					cout << name << endl;
					create1.push_back(name);
				}
				if (isatt == true && ss[i] != ' '&&ss[i] != '(') {
					attribute = attribute + ss[i];
				}
				if (isatt == true && attribute != ""&&ss[i] == '(') {
					isatt = false;
					iscap = true;
					cout << attribute << endl;
					create1.push_back(attribute);
				}
				if (iscap == true && ss[i] != ' '&&ss[i] != '('&&ss[i] != ')') {
					capacity = capacity + ss[i];
				}
				if (iscap == true && ss[i] == ')'&&capacity != "") {
					iscap = false;
					cout << capacity << endl;
					create1.push_back(capacity);
				}
			}
			Create.push_back(create1);
			cout << endl;
			st = rsm[0].second;
		}
	}
	else {
		cout << "检查括号中语句是否存在错误！！！" << endl;
		return false;
	}
	result = Create;
	return true;
}

bool SqlEx::ForUpdate()
{
	vector<vector<string>> Update;

	regex reg1("(?<=update )\.+(?= set)");
	regex reg2("((?<=set )\.+(?= where))|((?<=set )\.+(?=END))");
	regex reg3("(?<=where )\.+(?=END)");

	smatch ssm[3];

	if (regex_search(Ex, ssm[0], reg1)) {
		cout << "update:" << endl;
		vector<string> attribute;
		string stt = "";
		string ss = ssm[0].str();
		for (int i = 0; i < ss.size(); i++) {
			if (ss[i] != ' ' && ss[i] != ',') {
				stt = stt + ss[i];
			}
			if ((ss[i] == ',' || i == ss.size() - 1) && stt != "") {
				cout << stt << endl;
				attribute.push_back(stt);
				stt = "";
			}
		}
		Update.push_back(attribute);
	}
	else {
		cout << "检查updata与set语句之间是否存在错误！！！" << endl;
		return false;
	}
	if (regex_search(Ex, ssm[1], reg2)) {
		cout << "from:" << endl;
		vector<string> tablename;
		string stt = "";
		string ss = ssm[1].str();
		for (int i = 0; i < ss.size(); i++) {
			if (ss[i] != ' ' && ss[i] != ',') {
				stt = stt + ss[i];
			}
			if ((ss[i] == ',' || i == ss.size() - 1) && stt != "") {
				cout << stt << endl;
				tablename.push_back(stt);
				stt = "";
			}
		}
		Update.push_back(tablename);
	}
	else {
		cout << "检查set字段是否存在错误！！！" << endl;
		return false;
	}
	if (regex_search(Ex, ssm[2], reg3)) {
		vector<string>condition;
		cout << "where:" << endl;
		string sst = ssm[2].str();
		regex sr("(\.+?and )|(\.+?or )");
		smatch srsm;
		string::const_iterator st = sst.begin();
		string::const_iterator en = sst.end();
		bool flag = false;
		while (regex_search(st, en, srsm, sr)) {
			flag = true;
			cout << srsm.str() << endl;
			condition.push_back(srsm.str());
			st = srsm[0].second;
		}
		if (flag) {
			regex_search(st, en, srsm, regex("\.+"));
			cout << srsm.str() << endl;
			condition.push_back(srsm.str());
		}
		else {
			cout << sst << endl;
			condition.push_back(sst);
		}
		Update.push_back(condition);
	}
	result = Update;
	return true;
}
bool SqlEx::ForDelete() {
	vector<vector<string>> Vdelete;

	regex a1("(?<=delete from )\.+(?=where )");
	regex a2("(?<=where )\.+(?=END)");

	string dstr[2];
	smatch dsm[2];

	string::const_iterator st = Ex.begin();
	string::const_iterator en = Ex.end();

	if (regex_search(Ex, dsm[0], a1)) {
		vector<string>vdelete1;
		dstr[0] = dsm[0].str();
		vdelete1.push_back(dstr[0]);
		cout << "delete from:" << endl;
		cout << dstr[0] << endl;
		cout << endl;
		Vdelete.push_back(vdelete1);
	}
	else {
		cout << "检查delete from与where之间是否存在错误" << endl;
	}
	if (regex_search(Ex, dsm[1], a2)) {
		vector<string>vdelete1;
		cout << "where:" << endl;

		dstr[1] = dsm[1].str();
		regex rr("(\.+?and )|(\.+?or )");
		smatch rrsm;
		string::const_iterator st = dstr[1].begin();
		string::const_iterator en = dstr[1].end();
		bool flag = false;
		while (regex_search(st, en, rrsm, rr)) {
			flag = true;
			cout << rrsm.str() << endl;
			vdelete1.push_back(rrsm.str());
			st = rrsm[0].second;
		}
		if (flag) {
			regex_search(st, en, rrsm, regex("\.+"));
			cout << rrsm.str() << endl;
			vdelete1.push_back(rrsm.str());
		}
		else {
			cout << dstr[1] << endl;
			vdelete1.push_back(dstr[1]);
		}
		Vdelete.push_back(vdelete1);
	}
	else {
		cout << "检查where语句后是否存在错误！！" << endl;
	}
	result = Vdelete;
	return true;
}

bool SqlEx::ForInsert() {
	vector<vector<string>> Vinsert;

	regex a1("(?<=insert into )\.+(?=values)");
	regex a2("(?<=values\\()\.+(?=\\)END)");

	string istr[2];
	smatch ism[2];

	if (regex_search(Ex, ism[0], a1)) {
		vector<string>vinsert1;
		istr[0] = ism[0].str();

		regex rr("(?<=\\()\.+(?=\\))");
		smatch rsm;
		cout << "Insert into:" << endl;
		if (regex_search(istr[0], rsm, rr)) {
			regex rr2("\.+?(?=\\()");
			smatch rsm2;
			regex_search(istr[0], rsm2, rr2);
			cout << rsm2.str() << endl;
			cout << endl;
			vinsert1.push_back(rsm2.str());

			string rstr = rsm.str();

			smatch rsm1;
			regex rr1("(?<=')\.+?(?=')");
			string::const_iterator st = rstr.begin();
			string::const_iterator en = rstr.end();

			while (regex_search(st, en, rsm1, rr1)) {
				if (rsm1.str() != ",") {
					cout << rsm1.str() << endl;
					vinsert1.push_back(rsm1.str());
				}
				st = rsm1[0].second;
			}
		}
		else {
			vinsert1.push_back(istr[0]);
			cout << istr[0] << endl;
		}
		Vinsert.push_back(vinsert1);
		cout << endl;
	}
	else {
		cout << "检查insert into语句后是否存在错误！！！" << endl;
		return false;
	}
	if (regex_search(Ex, ism[1], a2)) {
		vector<string>vinsert2;
		istr[1] = ism[1].str();
		cout << "Values:" << endl;
		smatch rsm3;
		regex rr3("(?<=')\.+?(?=')");
		string::const_iterator st = istr[1].begin();
		string::const_iterator en = istr[1].end();

		while (regex_search(st, en, rsm3, rr3)) {
			if (rsm3.str() != ",") {
				cout << rsm3.str() << endl;
				vinsert2.push_back(rsm3.str());
			}
			st = rsm3[0].second;
		}
		Vinsert.push_back(vinsert2);
	}
	else {
		cout << "检查values语句后是否存在错误！！！" << endl;
		return false;
	}
	result = Vinsert;
	return true;
}

bool SqlEx::ForSelect()
{
	vector<vector<string>> Select;

	regex reg1("(?<=select )\.+?(?= from)");
	regex reg2("((?<=from )\.+?(?= where))|((?<=from )\.+?(?=END))");
	regex reg3("(?<=where )\.+?(?=END)");

	smatch ssm[3];

	if (regex_search(Ex, ssm[0], reg1)) {
		cout << "select:" << endl;
		vector<string> attribute;
		string stt = "";
		string ss = ssm[0].str();
		for (int i = 0; i < ss.size(); i++) {
			if (ss[i] != ' ' && ss[i] != ',') {
				stt = stt + ss[i];
			}
			if ((ss[i] == ',' || i == ss.size() - 1) && stt != "") {
				cout << stt << endl;
				attribute.push_back(stt);
				stt = "";
			}
		}
		Select.push_back(attribute);
	}
	else {
		cout << "检查select from语句后是否存在错误！！！" << endl;
		return false;
	}
	if (regex_search(Ex, ssm[1], reg2)) {
		cout << "from:" << endl;
		vector<string> tablename;
		string stt = "";
		string ss = ssm[1].str();
		for (int i = 0; i < ss.size(); i++) {
			if (ss[i] != ' ' && ss[i] != ',') {
				stt = stt + ss[i];
			}
			if ((ss[i] == ',' || i == ss.size() - 1) && stt != "") {
				cout << stt << endl;
				tablename.push_back(stt);
				stt = "";
			}
		}
		Select.push_back(tablename);
	}
	else {
		cout << "检查from语句后是否存在错误！！！" << endl;
		return false;
	}
	if (regex_search(Ex, ssm[2], reg3)) {
		vector<string>condition;
		cout << "where:" << endl;
		string sst = ssm[2].str();
		regex sr("(\.+?and )|(\.+?or )");
		smatch srsm;
		string::const_iterator st = sst.begin();
		string::const_iterator en = sst.end();
		bool flag = false;
		while (regex_search(st, en, srsm, sr)) {
			flag = true;
			cout << srsm.str() << endl;
			condition.push_back(srsm.str());
			st = srsm[0].second;
		}
		if (flag) {
			regex_search(st, en, srsm, regex("\.+"));
			cout << srsm.str() << endl;
			condition.push_back(srsm.str());
		}
		else {
			cout << sst << endl;
			condition.push_back(sst);
		}
		Select.push_back(condition);
	}
	result = Select;
	return true;
}

vector<vector<string>>SqlEx::getResult()
{
	return result;
}
string SqlEx::sql(string sql)//语句预处理
{
	const int count = sql.size();
	string b = "";
	int flag = 0;//标记
	int n = 0;
	for (int i = 0; i < count; i++)
	{
		if (sql[i] >= 65 && sql[i] <= 90)
			sql[i] += 32;
		if (sql[i] != ' ')
		{
			b += sql[i];
			n++;
			flag = 1;
		}
		else if (sql[i] == ' '&&flag == 1)  //sql[i]==' '但是前一个不是' '
		{
			b += sql[i];
			n++;
			flag = 0;
		}
		else //连续的' '
		{
			flag = 0;
			continue;
		}
		
	}
	if (b[n - 1] == ' ')
		b.erase(n - 1, 1);
	return b;
}
int main()
{
	std::string str = "";
	do {
		getline(std::cin, str);
		SqlEx se(str);
		if (se.check()){
			vector<vector<string>> vec;
			vector<vector<string>>::iterator ite;
			vec = se.getResult();
			for (int i = 0; i < vec.size(); i++) {
				for (int j = 0; j < vec[i].size(); j++) {
					cout << vec[i][j] << endl;
				}
				cout << endl;
			}
		}
	} while (str != "#");



	return 0;
}
